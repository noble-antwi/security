# Amazon 
# re:Invent SEC247 Workshop
AWSTemplateFormatVersion: 2010-09-09
Description: re:Invent 2023 - SEC247 - Practical Data Protection and Risk Assessment for sensitive workloads.

Parameters:
  awsevent:
    Type: String
    Description: Are you running this at an AWS event?
    Default: "Yes"
  pPIITag:
    Type: String
    Description: Tag key to look for on S3 Object
    Default: PII
  AssetsBucketName:
    Type: String
    Description: Name of S3 bucket that stores assets (e.g. PII example files)
    Default: example-bucket
  AssetsBucketPrefix:
    Type: String
    Description: Folder prefix for S3 bucket that stores assets (e.g. PII example files)
    Default: example-prefix

Resources:
#Â Enable Amazon Macie
  MacieSession:
    Type: AWS::Macie::Session
    Properties:
      FindingPublishingFrequency: FIFTEEN_MINUTES
      Status: ENABLED

#Create Amazon Macie S3 Bucket with its Bucket Policy
  MacieDataBucket:
    Type: 'AWS::S3::Bucket'
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W51
            reason: "Access intended only within the same account"
          - id: W35
            reason: "Access Logging not required. This is the bucket contains mock data" 
      checkov:
        skip:
          - id: "CKV_AWS_18"
            comment: "Access Logging not required. This is the bucket contains mock data" 


    Properties:
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      VersioningConfiguration:
        Status: Enabled
      OwnershipControls:
        Rules:
          - ObjectOwnership: BucketOwnerEnforced

      BucketName:
        Fn::Join:
          - '-'
          - ['07-example-corp-pii', !Ref "AWS::AccountId", !Ref "AWS::Region"]
  MyS3BucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: 
        Ref: MacieDataBucket
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Sid: "AccessOnObjectByTag"
            Effect: "Deny"
            Principal: "*"
            Action: 
              - "s3:GetObject"
              - "s3:GetObjectVersion"
            Resource:
              Fn::Join:
                - ""
                -
                  - Fn::GetAtt:
                      - "MacieDataBucket"
                      - "Arn"
                  - "/*"
            Condition:
              StringEquals:
                s3:ExistingObjectTag/ClassificationLevel: !Ref pPIITag
              StringNotEquals:
                aws:PrincipalTag/AccessLevel: !Ref pPIITag

# Generate Fake Data for Amazon Macie Job on Stack Creation
# Clean up S3 buckets on Stack Deletion
  LoadMacieData:
    DependsOn:
      - MacieDataBucket
    Type: Custom::LoadMacieData
    Properties:
      ServiceToken:
        Fn::GetAtt:
          - "LoadMacieDataLambda"
          - "Arn"
      BucketName: !Ref MacieDataBucket

  # LogGroup for Lambda Load Macie Data
  LoadMacieDataLambdaLogGroup:
    Type: AWS::Logs::LogGroup
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W84
            reason: "Demo environment.  No need to encrypt log data"
    Properties:
      LogGroupName: /aws/lambda/LoadMacieDataLambda
      RetentionInDays: 14

  # IAM Role for Lambda to load Macie Data
  LoadMacieDataLambdaRole:
    Type: AWS::IAM::Role
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W11
            reason: "Demo / PoC environment. No sensitve resources deployed (or should exist) in environment."
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: "/"
      Policies:
      - PolicyName: !Join [ "-", ['7-LoadMacieDataLambdaPolicy', !Ref "AWS::AccountId"] ]
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - logs:DescribeLogStreams
            - logs:CreateLogStream
            - logs:PutLogEvents
            - s3:DeleteObject
            - s3:ListBucket
            - s3:Get*
            - s3:Describe*
            - macie2:CreateClassificationJob
            Resource: '*'
          - Effect: Allow
            Action: s3:PutEncryptionConfiguration
            Resource: !GetAtt MacieDataBucket.Arn
          - Effect: Allow
            Action: s3:PutObject
            Resource:
              Fn::Join:
                - '/'
                - [!GetAtt MacieDataBucket.Arn, '*']

            
  # The actual custom resource to copy the data in
  LoadMacieDataLambda:
    DependsOn:
      - MacieSession
    Type: AWS::Lambda::Function
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W89
            reason: "Demo environment.  No need for Lambda to access private resources or prevent Internet egress"
          - id: W92
            reason: "Demo / PoC environment.  Should be no need to reserve concurrency as should not be run in environment with other workloads"
          - id: W58
            reason: "Lambda has permission to write to CloudWatch via LoadMacieDataLambdaRole.Arn"
    Properties:
      FunctionName: LoadMacieDataLambda
      Handler: "index.lambda_handler"
      Runtime: python3.11
      MemorySize: 128
      Timeout: 300
      Role: !GetAtt LoadMacieDataLambdaRole.Arn
      Code:
        ZipFile: !Sub |
          import json
          import logging
          import os
          import time

          import boto3
          import cfnresponse
          import urllib3

          logger = logging.getLogger()
          logger.setLevel(logging.INFO)
          AccountId = os.environ["AccountId"]
          BucketMacie = os.environ["BucketMacie"]
          AssetsBucketName = os.environ["AssetsBucketName"]
          AssetsBucketPrefix = os.environ["AssetsBucketPrefix"]
          awsevent = os.environ.get("AWSEVENT", "Yes")


          def lambda_handler(event, context):
              logger.info("event: {}".format(event))
              try:
                  bucket = event["ResourceProperties"]["BucketName"]
                  logger.info(
                      "bucket: {}, event['RequestType']: {}".format(bucket, event["RequestType"])
                  )
                  if event["RequestType"] == "Delete":
                      s3 = boto3.resource("s3")
                      bucket = s3.Bucket(bucket)
                      for obj in bucket.objects.filter():
                          logger.info("delete obj: {}".format(obj))
                          s3.Object(bucket.name, obj.key).delete()
                  elif event["RequestType"] == "Create":
                      if awsevent.lower() in ["y", "yes"]:
                          s3 = boto3.resource("s3")
                          old_bucket_name = AssetsBucketName
                          old_prefix = AssetsBucketPrefix + "s3_files/"
                          new_bucket_name = BucketMacie
                          new_prefix = ""
                          old_bucket = s3.Bucket(old_bucket_name)
                          new_bucket = s3.Bucket(new_bucket_name)

                          logger.info(f"Source Bucket: {old_bucket_name} - Prefix: {old_prefix}")
                          logger.info(f"Target Bucket: {new_bucket_name} - Prefix: {new_prefix}")

                          for obj in old_bucket.objects.filter(Prefix=old_prefix):
                              old_source = {"Bucket": old_bucket_name, "Key": obj.key}
                              new_key = obj.key.replace(old_prefix, new_prefix, 1)
                              new_obj = new_bucket.Object(new_key)
                              new_obj.copy(old_source)
                  sendResponseCfn(event, context, cfnresponse.SUCCESS)
              except Exception as e:
                  logger.info("Exception: {}".format(e))
                  sendResponseCfn(event, context, cfnresponse.FAILED)


          def sendResponseCfn(event, context, responseStatus):
              responseData = {}
              responseData["Data"] = {}
              cfnresponse.send(
                  event, context, responseStatus, responseData, "CustomResourcePhysicalID"
              )
      Environment:
        Variables:
          Region:
            !Ref "AWS::Region"
          AccountId:
            !Ref "AWS::AccountId"
          DEBUG_MODE: True
          BucketMacie: 
            !Ref MacieDataBucket
          AssetsBucketName:
            !Ref AssetsBucketName
          AssetsBucketPrefix: 
            !Ref AssetsBucketPrefix
          AWSEVENT:
            !Ref awsevent

# --- Ollie's Lambda Role
  ConfigS3LambdaRole:
    Type: 'AWS::IAM::Role'
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W11
            reason: "Demo / PoC environment. No sensitve resources deployed (or should exist) in environment."
          - id: W28
            reason: "Demo / PoC environment. Not intended to create long lived resources needing maintenance"
    Properties:
      RoleName: !Sub 'ConfigS3LambdaRole'
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action: 'sts:AssumeRole'
      Path: /
      Policies:
        - PolicyName: !Sub 'config-s3-lambda-policy'
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Sid: CreateLogGroup
                Effect: Allow
                Action:
                  - 'logs:CreateLogGroup'
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                  - 's3:GetBucketTagging'
                  - 's3:GetObjectTagging'
                  - 's3:PutBucketTagging'
                  - 's3:PutObjectTagging'
                  - 's3:GetEncryptionConfiguration'
                  - 'config:PutEvaluations'
                  - 'kms:DescribeKey'
                Resource: '*'


# Ollie's lambda function
  ConfigS3Lambda:
    Type: AWS::Lambda::Function
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W89
            reason: "Demo environment.  No need for Lambda to access private resources or prevent Internet egress"
          - id: W92
            reason: "Demo / PoC environment.  Should be no need to reserve concurrency as should not be run in environment with other workloads"
    Properties:
      FunctionName: ConfigS3Rule
      Handler: "index.handler"
      Runtime: python3.11
      MemorySize: 128
      Timeout: 300
      Role: !GetAtt ConfigS3LambdaRole.Arn
      Code:
        ZipFile: !Sub |
          import json

          import boto3

          # Specify desired resource types to validate
          APPLICABLE_RESOURCES = ["AWS::S3::Bucket"]


          def find_violation(bucket):
              violation = ""
              s3_client = boto3.client("s3")
              kms_client = boto3.client("kms")
              response = s3_client.get_bucket_encryption(Bucket=bucket)

              if (
                  response["ServerSideEncryptionConfiguration"]["Rules"][0][
                      "ApplyServerSideEncryptionByDefault"
                  ]["SSEAlgorithm"]
                  == "AES256"
              ):
                  # Encrypted with the S3 service key - NONCOMPLIANT
                  violation = violation + "\n" + " Using S3 service key "
              else:
                  key_id = response["ServerSideEncryptionConfiguration"]["Rules"][0][
                      "ApplyServerSideEncryptionByDefault"
                  ]["KMSMasterKeyID"]

                  kms_response = kms_client.describe_key(KeyId=key_id)

                  if kms_response["KeyMetadata"]["KeyManager"] == "AWS":
                      # Encrypted with AWS owned key - NONCOMPLIANT
                      violation = violation + "\n" + " Using AWS Managed Key "

              return violation


          def evaluate_compliance(configuration_item):
              if configuration_item["resourceType"] not in APPLICABLE_RESOURCES:
                  return {
                      "compliance_type": "NOT_APPLICABLE",
                      "annotation": "The rule doesn't apply to resources of type "
                      + configuration_item["resourceType"]
                      + ".",
                  }

              if configuration_item["configurationItemStatus"] == "ResourceDeleted":
                  return {
                      "compliance_type": "NOT_APPLICABLE",
                      "annotation": "The configurationItem was deleted and therefore cannot be validated.",
                  }

              current_bucket = configuration_item.get("resourceName")
              violation = find_violation(current_bucket)

              if violation:
                  return {"compliance_type": "NON_COMPLIANT", "annotation": violation}

              return {"compliance_type": "COMPLIANT", "annotation": "Using KMS CMK"}


          def handler(event, context):
              print(event)
              invoking_event = json.loads(event["invokingEvent"])
              configuration_item = invoking_event["configurationItem"]

              result_token = "No token found."
              if "resultToken" in event:
                  result_token = event["resultToken"]

              evaluation = evaluate_compliance(configuration_item)

              config = boto3.client("config")
              config.put_evaluations(
                  Evaluations=[
                      {
                          "ComplianceResourceType": configuration_item["resourceType"],
                          "ComplianceResourceId": configuration_item["resourceId"],
                          "ComplianceType": evaluation["compliance_type"],
                          "Annotation": evaluation["annotation"],
                          "OrderingTimestamp": configuration_item["configurationItemCaptureTime"],
                      },
                  ],
                  ResultToken=result_token,
              )


# --- PII LAMBDA FOR STEP FUNCTION INTEGRATION
  # PII Lambda Role - extra permissions to change object tags
  piiTagLambdaRole:
    Type: 'AWS::IAM::Role'
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W11
            reason: "Demo / PoC environment. No sensitve resources deployed (or should exist) in environment."
          - id: W28
            reason: "Demo / PoC environment. Not intended to create long lived resources needing maintenance"
    Properties:
      RoleName: !Sub 'pii-tag-lambda-role'
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action: 'sts:AssumeRole'
      Path: /
      Policies:
        - PolicyName: !Sub 'pii-tag-lambda-policy'
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Sid: CreateLogGroup
                Effect: Allow
                Action:
                  - 'logs:CreateLogGroup'
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                  - 's3:GetBucketTagging'
                  - 's3:GetObjectTagging'
                  - 's3:PutBucketTagging'
                  - 's3:PutObjectTagging'
                Resource: '*'

# Actual PII Tagging Lambda                
  piiTagLambda:
    Type: 'AWS::Lambda::Function'
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W89
            reason: "Demo environment.  No need for Lambda to access private resources or prevent Internet egress"
          - id: W92
            reason: "Demo / PoC environment.  Should be no need to reserve concurrency as should not be run in environment with other workloads"
    Properties:
      Description: Tags the S3 bucket with PII Data
      FunctionName: pii_tag_lambda
      Handler: index.lambda_handler
      Role: !GetAtt
        - piiTagLambdaRole
        - Arn
      Runtime: python3.11
      MemorySize: 128
      Timeout: 180
      Environment:
        Variables:
          DEBUG_MODE: True
          PIITAG: !Ref pPIITag
      Code:
        ZipFile: |
          import json
          import os

          import boto3


          def lambda_handler(event, context):
              print(f"EVENT: {json.dumps(event)}")

              # Grab the tag value from the environment variables (that are set from the Cloudformation parameters)
              if "PIITAG" in os.environ:
                  pPIITag = os.environ["PIITAG"]
              else:
                  pPIITag = "PII"

              s3 = boto3.resource("s3")
              client = boto3.client("s3")

              # Retrieve the bucket and object data from the EventBridge Rule payload
              s3BucketName = event["detail"]["resourcesAffected"]["s3Bucket"]["name"]
              s3objectKey = event["detail"]["resourcesAffected"]["s3Object"]["key"]

              print(
                  f"Now tagging {s3objectKey} in {s3BucketName} with ClassificationLevel:{pPIITag}"
              )

              # Apply the tag to the S3 object
              object_tagging = client.put_object_tagging(
                  Bucket=s3BucketName,
                  Key=s3objectKey,
                  Tagging={
                      "TagSet": [
                          {"Key": "ClassificationLevel", "Value": pPIITag},
                      ]
                  },
              )

              print(f"OBJECT TAGGING RESPONSE: {object_tagging}")

  # IAM Roles used for testing getting access to the S3 bucket
  AllowedIAMRole:
    Type: AWS::IAM::Role
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W11
            reason: "Demo / PoC environment. No sensitve resources deployed (or should exist) in environment."
          - id: W28
            reason: "Demo / PoC environment. Not intended to create long lived resources needing maintenance"            
    Properties:
      RoleName: "AuthorizedRole"
      AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
          - Sid: TrustPolicyToAllowAssumeRole
            Action: sts:AssumeRole
            Effect: Allow
            Principal:                
              AWS:
                - !Sub arn:${AWS::Partition}:iam::${AWS::AccountId}:root
      Description: "IAM Role allowed to read classify objects "
      Tags:
      - Key: AccessLevel
        Value: !Ref pPIITag
      - Key: ResourceType
        Value: "IAM Role"
      Policies:
        - PolicyName: "AuthorizedRole-pol"
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
            - Action: 
                - s3:Get*
                - s3:List*
              Effect: Allow
              Resource: "*"

# swaym 20231106 buckets for Glue job
  ExportDataBucket:
    Type: 'AWS::S3::Bucket'
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W51
            reason: "Access intended only within the same account"
          - id: W35
            reason: "Access Logging not required. This is the bucket contains mock data" 
      checkov:
        skip:
          - id: "CKV_AWS_18"
            comment: "Access Logging not required. This is the bucket contains mock data" 
    Properties:
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      VersioningConfiguration:
        Status: Enabled
      OwnershipControls:
        Rules:
          - ObjectOwnership: BucketOwnerEnforced

      BucketName:
        Fn::Join:
          - '-'
          - ['08-example-corp-export-data', !Ref "AWS::AccountId", !Ref "AWS::Region"]

# Source data bucket for Glue Job - used to store raw CSV file
  SourceDataBucket:
    Type: 'AWS::S3::Bucket'
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W51
            reason: "Access intended only within the same account"
          - id: W35
            reason: "Access Logging not required. This is the bucket contains mock data" 
      checkov:
        skip:
          - id: "CKV_AWS_18"
            comment: "Access Logging not required. This is the bucket contains mock data" 
    Properties:
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      VersioningConfiguration:
        Status: Enabled
      OwnershipControls:
        Rules:
          - ObjectOwnership: BucketOwnerEnforced

      BucketName:
        Fn::Join:
          - '-'
          - ['08-example-corp-source-data', !Ref "AWS::AccountId", !Ref "AWS::Region"]

# swaym 20231106 policy for glue job

  # IAM Role used by Glue for getting access to the source and target S3 buckets
  GlueScanRole:
    Type: AWS::IAM::Role
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W11
            reason: "Demo / PoC environment. No sensitve resources deployed (or should exist) in environment."
          - id: W28
            reason: "Demo / PoC environment. Not intended to create long lived resources needing maintenance"
    Properties:
      RoleName: "GluePIIScanRole"
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - glue.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: "Glue-s3-policy"
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
            - Action: 
                - s3:List*
                - s3:Get*
                - s3:PutObject*
                - s3:DeleteObject**
              Effect: Allow
              Resource: 
                - !Join
                    - ''
                    - - !GetAtt SourceDataBucket.Arn
                      - '/*'
                - !Join
                  - ''                  
                  - - !GetAtt ExportDataBucket.Arn
                    - '/*'
        - PolicyName: "Glue-scan-policy"
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
            - Action:
              - glue:Create*
              - glue:Get*
              - glue:List*
              - glue:Check*
              - glue:Batch*
              - s3:GetBucketLocation
              - s3:ListBucket
              - s3:ListAllMyBuckets
              - s3:GetBucketAcl
              - ec2:DescribeVpcEndpoints
              - ec2:DescribeRouteTables
              - ec2:CreateNetworkInterface
              - ec2:DeleteNetworkInterface
              - ec2:DescribeNetworkInterfaces
              - ec2:DescribeSecurityGroups
              - ec2:DescribeSubnets
              - ec2:DescribeVpcAttribute
              - iam:ListRolePolicies
              - iam:GetRole
              - iam:GetRolePolicy
              - cloudwatch:PutMetricData
              Effect: Allow
              Resource: 
                - "*"
            - Action:
              - s3:CreateBucket
              Effect: Allow
              Resource:
                - arn:aws:s3:::aws-glue-*
            - Action:
              - s3:GetObject
              - s3:PutObject
              - s3:DeleteObject
              Effect: Allow
              Resource:
                - arn:aws:s3:::aws-glue-*/*
                - arn:aws:s3:::*/*aws-glue-*/*
            - Action:
              - s3:GetObject
              Effect: Allow
              Resource:
                - arn:aws:s3:::crawler-public*
                - arn:aws:s3:::aws-glue-*
            - Action:
              - logs:CreateLogGroup
              - logs:CreateLogStream
              - logs:PutLogEvents
              Effect: Allow
              Resource:
                - arn:aws:logs:*:*:*:/aws-glue/*
            - Action:
              - ec2:CreateTags
              - ec2:DeleteTags
              Effect: Allow
              Resource:
                - arn:aws:ec2:*:*:network-interface/*
                - arn:aws:ec2:*:*:security-group/*
                - arn:aws:ec2:*:*:instance/*
              Condition:
                ForAllValues:StringEquals:
                  aws:TagKeys:
                  - aws-glue-service-resource

# --- KMS Keys
# ---- goffalex - 2023-11-08
  BucketKey:
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: F19
            reason: "Short lived workshop.  Key Rotation intentionally left off this key"
      checkov:
        skip:
          - id: "CKV_AWS_7"
            reason: "Short lived workshop.  Key Rotation intentionally left off this key"
    Type: 'AWS::KMS::Key'
    Properties:
      KeyPolicy:
        Version: 2012-10-17
        Id: key-policy-for-iam
        Statement:
          - Sid: Enable IAM User Permissions
            Effect: Allow
            Principal:
              AWS: !Sub "arn:aws:iam::${AWS::AccountId}:root"
            Action: 'kms:*'
            Resource: '*'
  BucketKeyAlias:
    Type: 'AWS::KMS::Alias'
    Properties:
      AliasName: alias/bucketkey
      TargetKeyId: !Ref BucketKey
      
Outputs:
  PIIS3Bucket:
    Description: Module 07 - S3 bucket containing mock PII data
    Value: !Ref MacieDataBucket
    Export:
      Name: PIIS3Bucket
  SourceS3Bucket:
    Description: Module 08 - Source S3 bucket for data exports
    Value: !Ref SourceDataBucket
    Export:
      Name: SourceS3Bucket
  ExportS3Bucket:
    Description: Module 08 - Destination S3 bucket for data exports
    Value: !Ref ExportDataBucket
    Export:
      Name: ExportS3Bucket
  BucketKey:
    Description: AWS KMS CMK used for encrypting buckets
    Value: !Ref BucketKey
    Export:
      Name: BucketKey
  BucketKeyAlias:
    Description: AWS KMS CMK alias used for encrypting buckets
    Value: !Ref BucketKeyAlias
    Export:
      Name: BucketKeyAlias